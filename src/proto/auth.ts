// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface LoginRequest {
  email: string;
  password: string;
  role: string;
}

export interface SignUpRequest {
  email: string;
  password: string;
  name: string;
  phoneNo: string;
  role: string;
}

export interface LogoutRequest {
  userId: string;
}

export interface RefreshTokenRequest {
  refreshToken: string;
}

export interface ResetPasswordRequest {
  userId: string;
  newPassword: string;
}

export interface AuthResponse {
  accessToken: string;
  refreshToken: string;
}

export interface LogoutResponse {
  success: boolean;
}

export interface ResetPasswordResponse {
  success: boolean;
}

export interface ErrorResponse {
  code: number;
  message: string;
  details: string;
}

/** Success response message */
export interface SuccessResponse {
  /** Indicates if the request was successful */
  success: boolean;
  /** ISO timestamp of the response */
  timestamp: string;
  /** Main response data (serialized as bytes) */
  data: Uint8Array;
  /** Metadata about the response */
  meta: SuccessResponse_Meta | undefined;
}

/** Nested metadata message */
export interface SuccessResponse_Meta {
  /** HTTP status code (e.g., 200) */
  code: number;
  /** Human-readable message (e.g., "Success") */
  message: string;
  /** Additional key-value pairs */
  extras: { [key: string]: string };
}

export interface SuccessResponse_Meta_ExtrasEntry {
  key: string;
  value: string;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  login(request: LoginRequest): Observable<SuccessResponse>;

  signUp(request: SignUpRequest): Observable<SuccessResponse>;

  logout(request: LogoutRequest): Observable<LogoutResponse>;

  refreshToken(request: RefreshTokenRequest): Observable<SuccessResponse>;

  resetPassword(request: ResetPasswordRequest): Observable<ResetPasswordResponse>;
}

export interface AuthServiceController {
  login(request: LoginRequest): Promise<SuccessResponse> | Observable<SuccessResponse> | SuccessResponse;

  signUp(request: SignUpRequest): Promise<SuccessResponse> | Observable<SuccessResponse> | SuccessResponse;

  logout(request: LogoutRequest): Promise<LogoutResponse> | Observable<LogoutResponse> | LogoutResponse;

  refreshToken(request: RefreshTokenRequest): Promise<SuccessResponse> | Observable<SuccessResponse> | SuccessResponse;

  resetPassword(
    request: ResetPasswordRequest,
  ): Promise<ResetPasswordResponse> | Observable<ResetPasswordResponse> | ResetPasswordResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["login", "signUp", "logout", "refreshToken", "resetPassword"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
